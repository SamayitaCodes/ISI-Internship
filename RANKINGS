import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

class Company {
    private String name;
    private EnvironmentalImpact environmentalImpact;
    private SocialImpact socialImpact;
    private CorporateGovernance corporateGovernance;

    public Company(String name, EnvironmentalImpact environmentalImpact, SocialImpact socialImpact, CorporateGovernance corporateGovernance) {
        this.name = name;
        this.environmentalImpact = environmentalImpact;
        this.socialImpact = socialImpact;
        this.corporateGovernance = corporateGovernance;
    }

    public double calculateOverallESGScore() {
        double totalScore = environmentalImpact.calculateScore() +
                            socialImpact.calculateScore() +
                            corporateGovernance.calculateScore();
        return totalScore / 3; // Average ESG score
    }

    public String getName() {
        return name;
    }
}

class EnvironmentalImpact {
    private double carbonFootprint; // in tons per year
    private double waterUsage;      // in liters per year
    private double renewableEnergy; // percentage of energy from renewable sources
    private static final double MAX_SCORE = 100;

    public EnvironmentalImpact(double carbonFootprint, double waterUsage, double renewableEnergy) {
        this.carbonFootprint = carbonFootprint;
        this.waterUsage = waterUsage;
        this.renewableEnergy = renewableEnergy;
    }

    public double calculateScore() {
        double carbonScore = Math.max(0, 30 - carbonFootprint / 1000); // Lower footprint, higher score
        double waterScore = Math.max(0, 30 - waterUsage / 1000000);    // Lower usage, higher score
        double renewableScore = Math.min(renewableEnergy, 40);         // Cap at 40 points
        return carbonScore + waterScore + renewableScore;
    }
}

class SocialImpact {
    private double employeeSatisfaction; // Score out of 10
    private double communityInvestment;  // in million dollars
    private double diversityIndex;       // percentage of diverse employees
    private static final double MAX_SCORE = 100;

    public SocialImpact(double employeeSatisfaction, double communityInvestment, double diversityIndex) {
        this.employeeSatisfaction = employeeSatisfaction;
        this.communityInvestment = communityInvestment;
        this.diversityIndex = diversityIndex;
    }

    public double calculateScore() {
        double satisfactionScore = employeeSatisfaction * 10;               // Scaled to 100
        double investmentScore = Math.min(communityInvestment * 5, 40);     // Cap at 40 points
        double diversityScore = Math.min(diversityIndex, 50);               // Cap at 50 points
        return satisfactionScore + investmentScore + diversityScore;
    }
}

class CorporateGovernance {
    private double transparencyIndex;   // Score out of 10
    private int reportedIssues;         // Number of reported governance issues
    private double financialStability;  // Score out of 10
    private static final double MAX_SCORE = 100;

    public CorporateGovernance(double transparencyIndex, int reportedIssues, double financialStability) {
        this.transparencyIndex = transparencyIndex;
        this.reportedIssues = reportedIssues;
        this.financialStability = financialStability;
    }

    public double calculateScore() {
        double transparencyScore = transparencyIndex * 10;                   // Scaled to 100
        double issuesScore = Math.max(0, 30 - reportedIssues * 0.5);         // Penalty for issues
        double stabilityScore = financialStability * 6;                     // Scaled to 60
        return transparencyScore + issuesScore + stabilityScore;
    }
}

public class ESGRanking {
    public static void main(String[] args) {
        List<Company> companies = new ArrayList<>();

        // Adding new company data
        companies.add(new Company("GreenTech",
                new EnvironmentalImpact(500, 200000, 80),
                new SocialImpact(8.5, 15, 45),
                new CorporateGovernance(9, 2, 9.5)));

        companies.add(new Company("FutureCorp",
                new EnvironmentalImpact(800, 500000, 65),
                new SocialImpact(7.0, 20, 50),
                new CorporateGovernance(8, 5, 8.0)));

        companies.add(new Company("EcoSolutions",
                new EnvironmentalImpact(300, 150000, 90),
                new SocialImpact(9.0, 10, 40),
                new CorporateGovernance(9.5, 1, 9.0)));

        companies.add(new Company("SustainableWorks",
                new EnvironmentalImpact(1000, 700000, 50),
                new SocialImpact(6.5, 25, 60),
                new CorporateGovernance(7.5, 8, 7.0)));

        // Sort companies by ESG score in descending order
        companies.sort(Comparator.comparingDouble(Company::calculateOverallESGScore).reversed());

        // Display rankings
        System.out.println("Company Rankings Based on ESG Score:");
        for (int i = 0; i < companies.size(); i++) {
            System.out.printf("%d. %s - ESG Score: %.2f\n",
                    i + 1, companies.get(i).getName(), companies.get(i).calculateOverallESGScore());
        }
    }
}
